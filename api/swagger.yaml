openapi: "3.0.2"
info:
  title: Airport
  version: "1.0"
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: User
    description: Operations with user
  - name: Baggage
    description: Operations with baggage
  - name: Flight
    description: Operations with flight
  - name: Booking
    description: Operations with booking
  - name: Boarding check
    description: Operations with bording check



    
paths:
  /user:
    post:
      tags:
        - User
      summary: Create user
      description: Add new client or manager account
      requestBody:
        description: New client or manager info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: New user was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          $ref: '#/components/responses/IntegrityError'
        '400':
          $ref: '#/components/responses/ValidationError'


  /user/login:
    post:
      tags:
        - User
      security:
        - basicAuth_user: []
        - basicAuth_mgr: []
      summary: Log user into the system
      description: Create a new session for an existing user
      responses:
        '200':
          description: Session successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          $ref: '#/components/responses/WrongCredentialsError'
          
  /user/{id}:
    get:
      tags:
        - User
      security:
        - basicAuth_user: []
        - basicAuth_mgr: []
      summary: Get user info
      description: Get all info about an existing user by id
      parameters:
        - name: id
          in: path
          description: id of user to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

    put:
      tags:
        - User
      security:
        - basicAuth_user: []
      summary: Update an existing user
      description: Update personal information by id
      parameters:
        - name: id
          in: path
          description: id of user to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated personal info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/IntegrityError'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

    delete:
      tags:
        - User
      security:
        - basicAuth_user: []
        - basicAuth_mgr: []
      summary: Delete an existing user
      description: Delete an existing user by id
      parameters:
        - name: id
          in: path
          description: id of user to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The user was successfully deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

  /baggage:
    post:
      tags:
        - Baggage
      security:
        -  basicAuth_mgr: []
      summary: Create baggage
      description: Add baggage
      requestBody:
        description: Baggage info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Baggage'
        required: true
      responses:
        '201':
          description: New baggage was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Baggage'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/IntegrityError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

  /baggage/{id}:
    get:
      tags:
        - Baggage
      security:
         - basicAuth_mgr: []
      summary: Get baggage info
      description: Get all info about an existing baggage by id
      parameters:
        - name: id
          in: path
          description: id of baggage to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Baggage was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Baggage'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
          
  /booking:
    post:
      tags:
        - Booking
      security:
        - basicAuth_user: []
      summary: Create new booking
      description: Create booking 
      requestBody:
        description: New booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
        required: true
      responses:
        '201':
          description: New booking was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/IntegrityError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
          
  /booking/{id}:
    put:
      tags:
        - Booking
      security:
        - basicAuth_user: []
      summary: Update an existing booking
      description: Update booking information by id
      parameters:
        - name: id
          in: path
          description: id of booking to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Updated booking info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: The booking data was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
        '409':
          $ref: '#/components/responses/IntegrityError'
    delete:
      tags:
        - Booking
      security:
        - basicAuth_user: []
      summary: Delete an existing booking
      description: Delete an existing booking by id
      parameters:
        - name: id
          in: path
          description: id of booking to be deleted
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: The booking was successfully deleted
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/IntegrityError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
    get:
      tags:
        - Booking
      security:
        - basicAuth_user: []
        - basicAuth_mgr: []

      summary: Get details of booking
      description: Get all info about an existing booking by id
      parameters:
        - name: id
          in: path
          description: id of booking to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Booking was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

  /boarding-check:
    get:
      tags:
        - Boarding check
      security:
        - basicAuth_mgr: []
      summary: Get all boarding checks
      description: Get the list of all boarding checks and their details
      responses:
        '200':
          description: List of all boarding checks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardingCheck'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
    post:
      tags:
        - Boarding check
      security:
        - basicAuth_mgr: []
      summary: Add boarding check
      description: Add new boarding check 
      requestBody:
        description: New boarding check
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardingCheck'
        required: true
      responses:
        '201':
          description: New boarding check was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardingCheck'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/IntegrityError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
          
  /boarding-check/{id}:
    get:
      tags:
        - Boarding check
      security:
        - basicAuth_mgr: []
      summary: Get details of boarding
      description: Get all info about an existing boarding by id
      parameters:
        - name: id
          in: path
          description: id of boarding check to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Boarding was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardingCheck'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

  /flight:
    get:
      tags:
        - Flight
      summary: Get all flights
      description: Get the list of all flights and their details
      responses:
        '200':
          description: List of all flights
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'

    post:
      tags:
        - Flight
      security:
        - basicAuth_mgr: []
      summary: Create flight
      description: Create new flight
      requestBody:
        description: New flight
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
        required: true
      responses:
        '201':
          description: New flight was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
             
                  
  /flight/{id}:
    put:
      tags:
        - Flight
      security:
        - basicAuth_mgr: [ ]
      summary: Update an existing flight
      description: Update an existing flight by id
      parameters:
        - name: id
          in: path
          description: id of flight to be updated
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: New flight data
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Flight  was successfully updated
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

    get:
      tags:
        - Flight
      summary: Get details of flight
      description: Get all info about an existing flight by id
      parameters:
        - name: id
          in: path
          description: id of flight to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Flight details were successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '404':
          $ref: '#/components/responses/NotFoundError'
          
  /flight/{id}/public-status:
    get:
      tags:
        - Flight
      summary: Get Status of flight
      description: Get info about status of an existing flight by id
      parameters:
        - name: id
          in: path
          description: id of flight to be returned
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Status was successfully returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Public_status'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Flight
      security:
        - basicAuth_mgr: []
      summary: Update status of flight
      description: The progress of  updating public status
      parameters:
        - name: id
          in: path
          description: id of flight to be given new status
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: New flight status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Public_status'
      responses:
        '200':
          description: Flight status  was successfully updated
        '404':
          $ref: '#/components/responses/NotFoundError'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'
          
  /flight/{id}/user:
    get:
      tags:
        - Flight
      security:
        - basicAuth_mgr: []
      summary: Get all users who booked for  flight
      description: Get all users who booked for  flight
      parameters:
        - name: id
          in: path
          description: id of flight to get all users
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of all flight's users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

  /flight/{id}/boarded-user:
    get:
      tags:
        - Flight
      security:
        - basicAuth_mgr: []
      summary: Get only boarded users from flight
      description: Get only boarded users from flight
      parameters:
        - name: id
          in: path
          description: id of flight to get all boarded  users
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of all flight's boarded users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'

  /flight/{id}/report:
    get:
      tags:
        - Flight
      security:
        - basicAuth_mgr: []
      summary: Get report for flight
      description: Get info about passengers and baggage for flight by id
      parameters:
        - name: id
          in: path
          description: id of flight to be reported
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Report was successfully returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  flight_number:
                    type: integer
                    example: 1
                  total clients who boarded:
                    type: integer
                    example: 30
                  total clients who booked:
                    type: integer
                    example: 50
                  total baggage count:
                    type: integer
                    example: 35
        '404':
          $ref: '#/components/responses/NotFoundError'

  /flight/{id}/baggage:
    get:
      tags:
        - Flight
      security:
        - basicAuth_mgr: []
      summary: Get all  baggage for flight
      description: Get all baggage for flight
      parameters:
        - name: id
          in: path
          description: id of flight to get all baggage
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of all flight's baggage
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Baggage'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/WrongCredentialsError'
        '403':
          $ref: '#/components/responses/AccessDeniedError'


components:
  responses:
    AccessDeniedError:
      description: Access denied
    ValidationError:
      description: Invalid input data
    IntegrityError:
      description: Violation of integrity
    NotFoundError:
      description: Resource not found
    WrongCredentialsError:
      description: Wrong email or password

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Mmmm
        surname:
          type: string
          example: King
        country:
          type: string
          example: USA
        date_of_birth:
          type: string
          format: date
          example: 2017-10-11
        passport_number:
          type: string
          example: RK6544
        email:
          type: string
          example: m.anderson@gmail.com
        password:
          writeOnly: true
          type: string
          format: password 
          example: dvknmwpkd254v
        role:
          type: string
          example: client

    Flight:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 10
        number:
          type: string
          example: LH5563
        departure_city:
          type: string
          example: Lviv
        arrival_city:
          type: string
          example: London
        departure_time:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        arrival_time:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        status:
          type: integer
          format: date
          example: 0
    
    Booking:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 10
        reservation_time:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        baggage_count:
          type: integer
          example: 2
        flight_id:
          type: integer
          example: 1
        client_id:
          type: integer
          example: 1
    
    Baggage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 12
        weight:
          type: number
          format: float
          example: 22.4
        booking_id:
          type: integer
          format: int64
          example: 12
          
    BoardingCheck:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 12
        type:
          type: integer
          example: 1          
        result:
          type: integer
          example: 1
        manager_id:
          type: integer
          example: 1
        booking_id:
          type: integer
          example: 1

    Public_status:
      type: object
      properties:
        status:
          type: integer
          example: 1

  securitySchemes:
      basicAuth_mgr:
        description: Manager authentication
        type: http
        scheme: basic

      basicAuth_user:
        description: User authentication
        type: http
        scheme: basic


